(define-constant ERR-NOT-AUTHORIZED (err u100))
(define-constant ERR-INVALID-PROJECT-ID (err u101))
(define-constant ERR-INVALID-AMOUNT (err u102))
(define-constant ERR-ORACLE-NOT-CONFIRMED (err u103))
(define-constant ERR-PROJECT-NOT-REGISTERED (err u104))
(define-constant ERR-MINT-PAUSED (err u105))
(define-constant ERR-EXCEEDS-MAX-MINT (err u106))
(define-constant ERR-INVALID-TIMESTAMP (err u107))
(define-constant ERR-AUTHORITY-NOT-VERIFIED (err u108))
(define-constant ERR-INVALID-MIN-AMOUNT (err u109))
(define-constant ERR-INVALID-MAX-PROJ-MINT (err u110))
(define-constant ERR-UPDATE-NOT-ALLOWED (err u111))
(define-constant ERR-INVALID-UPDATE-PARAM (err u112))
(define-constant ERR-MAX-MINTS-EXCEEDED (err u113))
(define-constant ERR-INVALID-VERIF-LEVEL (err u114))
(define-constant ERR-INVALID-ECO-IMPACT (err u115))
(define-constant ERR-INVALID-ORACLE-PRINC (err u116))
(define-constant ERR-INVALID-TOKEN-CONTRACT (err u117))
(define-constant ERR-INVALID-REGISTRY-CONTRACT (err u118))
(define-constant ERR-INVALID-STATUS (err u119))
(define-constant ERR-INVALID-BATCH-SIZE (err u120))

(define-data-var minter-admin principal tx-sender)
(define-data-var mint-paused bool false)
(define-data-var max-mint-per-project uint u1000000)
(define-data-var min-mint-amount uint u100)
(define-data-var total-minted uint u0)
(define-data-var max-global-mint uint u100000000)
(define-data-var oracle-contract principal 'SP000000000000000000002Q6VF78.bogus-oracle)
(define-data-var token-contract principal 'SP000000000000000000002Q6VF78.biodiversity-token)
(define-data-var registry-contract principal 'SP000000000000000000002Q6VF78.project-registry)
(define-data-var mint-fee uint u500)
(define-data-var last-mint-timestamp uint u0)

(define-map minted-credits uint { amount: uint, timestamp: uint, eco-impact: uint, verif-level: uint })
(define-map mint-history uint (list 50 { batch-id: uint, amount: uint, timestamp: uint }))
(define-map project-mint-totals uint uint)
(define-map project-status uint bool)
(define-map batch-mints uint { total-amount: uint, count: uint })

(define-read-only (get-minted-credits (project-id uint))
  (map-get? minted-credits project-id)
)

(define-read-only (get-mint-history (project-id uint))
  (map-get? mint-history project-id)
)

(define-read-only (get-project-mint-total (project-id uint))
  (default-to u0 (map-get? project-mint-totals project-id))
)

(define-read-only (get-total-minted)
  (var-get total-minted)
)

(define-read-only (get-mint-paused)
  (var-get mint-paused)
)

(define-read-only (get-max-mint-per-project)
  (var-get max-mint-per-project)
)

(define-read-only (is-project-active (project-id uint))
  (default-to false (map-get? project-status project-id))
)

(define-private (validate-project-id (id uint))
  (if (> id u0)
    (ok true)
    ERR-INVALID-PROJECT-ID)
)

(define-private (validate-amount (amount uint))
  (if (and (>= amount (var-get min-mint-amount)) (> amount u0))
    (ok true)
    ERR-INVALID-AMOUNT)
)

(define-private (validate-eco-impact (impact uint))
  (if (> impact u0)
    (ok true)
    ERR-INVALID-ECO-IMPACT)
)

(define-private (validate-verif-level (level uint))
  (if (and (>= level u1) (<= level u5))
    (ok true)
    ERR-INVALID-VERIF-LEVEL)
)

(define-private (validate-timestamp (ts uint))
  (if (> ts (var-get last-mint-timestamp))
    (ok true)
    ERR-INVALID-TIMESTAMP)
)

(define-private (validate-batch-size (size uint))
  (if (and (> size u0) (<= size u50))
    (ok true)
    ERR-INVALID-BATCH-SIZE)
)

(define-private (validate-principal (p principal))
  (if (not (is-eq p tx-sender))
    (ok true)
    ERR-NOT-AUTHORIZED)
)

(define-private (validate-status (status bool))
  (if status
    (ok true)
    ERR-INVALID-STATUS)
)

(define-public (set-minter-admin (new-admin principal))
  (begin
    (asserts! (is-eq tx-sender (var-get minter-admin)) ERR-NOT-AUTHORIZED)
    (try! (validate-principal new-admin))
    (var-set minter-admin new-admin)
    (ok true)
  )
)

(define-public (set-mint-paused (paused bool))
  (begin
    (asserts! (is-eq tx-sender (var-get minter-admin)) ERR-NOT-AUTHORIZED)
    (var-set mint-paused paused)
    (ok true)
  )
)

(define-public (set-max-mint-per-project (new-max uint))
  (begin
    (asserts! (is-eq tx-sender (var-get minter-admin)) ERR-NOT-AUTHORIZED)
    (asserts! (> new-max u0) ERR-INVALID-UPDATE-PARAM)
    (var-set max-mint-per-project new-max)
    (ok true)
  )
)

(define-public (set-min-mint-amount (new-min uint))
  (begin
    (asserts! (is-eq tx-sender (var-get minter-admin)) ERR-NOT-AUTHORIZED)
    (asserts! (> new-min u0) ERR-INVALID-MIN-AMOUNT)
    (var-set min-mint-amount new-min)
    (ok true)
  )
)

(define-public (set-oracle-contract (new-oracle principal))
  (begin
    (asserts! (is-eq tx-sender (var-get minter-admin)) ERR-NOT-AUTHORIZED)
    (try! (validate-principal new-oracle))
    (var-set oracle-contract new-oracle)
    (ok true)
  )
)

(define-public (set-token-contract (new-token principal))
  (begin
    (asserts! (is-eq tx-sender (var-get minter-admin)) ERR-NOT-AUTHORIZED)
    (try! (validate-principal new-token))
    (var-set token-contract new-token)
    (ok true)
  )
)

(define-public (set-registry-contract (new-registry principal))
  (begin
    (asserts! (is-eq tx-sender (var-get minter-admin)) ERR-NOT-AUTHORIZED)
    (try! (validate-principal new-registry))
    (var-set registry-contract new-registry)
    (ok true)
  )
)

(define-public (set-mint-fee (new-fee uint))
  (begin
    (asserts! (is-eq tx-sender (var-get minter-admin)) ERR-NOT-AUTHORIZED)
    (asserts! (>= new-fee u0) ERR-INVALID-UPDATE-PARAM)
    (var-set mint-fee new-fee)
    (ok true)
  )
)

(define-public (activate-project (project-id uint))
  (begin
    (asserts! (is-eq tx-sender (var-get minter-admin)) ERR-NOT-AUTHORIZED)
    (try! (validate-project-id project-id))
    (map-set project-status project-id true)
    (ok true)
  )
)

(define-public (deactivate-project (project-id uint))
  (begin
    (asserts! (is-eq tx-sender (var-get minter-admin)) ERR-NOT-AUTHORIZED)
    (try! (validate-project-id project-id))
    (map-set project-status project-id false)
    (ok true)
  )
)

(define-public (mint-credits (project-id uint) (amount uint) (eco-impact uint) (verif-level uint))
  (let ((project-details (contract-call? .ConservationProjectRegistry get-project-details project-id))
        (oracle-verified (contract-call? .VerificationOracle is-verified project-id))
        (current-total (get-project-mint-total project-id)))
    (asserts! (not (var-get mint-paused)) ERR-MINT-PAUSED)
    (try! (validate-project-id project-id))
    (try! (validate-amount amount))
    (try! (validate-eco-impact eco-impact))
    (try! (validate-verif-level verif-level))
    (try! (validate-timestamp block-height))
    (asserts! (is-some project-details) ERR-PROJECT-NOT-REGISTERED)
    (asserts! oracle-verified ERR-ORACLE-NOT-CONFIRMED)
    (asserts! (is-project-active project-id) ERR-INVALID-STATUS)
    (asserts! (<= (+ current-total amount) (var-get max-mint-per-project)) ERR-EXCEEDS-MAX-MINT)
    (asserts! (<= (+ (var-get total-minted) amount) (var-get max-global-mint)) ERR-MAX-MINTS-EXCEEDED)
    (try! (stx-transfer? (var-get mint-fee) tx-sender (var-get minter-admin)))
    (try! (contract-call? .BiodiversityCreditToken mint amount tx-sender))
    (map-set minted-credits project-id { amount: amount, timestamp: block-height, eco-impact: eco-impact, verif-level: verif-level })
    (map-set project-mint-totals project-id (+ current-total amount))
    (var-set total-minted (+ (var-get total-minted) amount))
    (var-set last-mint-timestamp block-height)
    (print { event: "credits-minted", project-id: project-id, amount: amount })
    (ok true)
  )
)

(define-public (batch-mint-credits (project-id uint) (amounts (list 50 uint)) (eco-impacts (list 50 uint)) (verif-levels (list 50 uint)))
  (let ((size (len amounts))
        (project-details (contract-call? .ConservationProjectRegistry get-project-details project-id))
        (oracle-verified (contract-call? .VerificationOracle is-verified project-id))
        (current-total (get-project-mint-total project-id))
        (batch-total (fold + amounts u0)))
    (asserts! (not (var-get mint-paused)) ERR-MINT-PAUSED)
    (try! (validate-project-id project-id))
    (try! (validate-batch-size size))
    (asserts! (is-some project-details) ERR-PROJECT-NOT-REGISTERED)
    (asserts! oracle-verified ERR-ORACLE-NOT-CONFIRMED)
    (asserts! (is-project-active project-id) ERR-INVALID-STATUS)
    (asserts! (<= (+ current-total batch-total) (var-get max-mint-per-project)) ERR-EXCEEDS-MAX-MINT)
    (asserts! (<= (+ (var-get total-minted) batch-total) (var-get max-global-mint)) ERR-MAX-MINTS-EXCEEDED)
    (try! (stx-transfer? (* (var-get mint-fee) size) tx-sender (var-get minter-admin)))
    (fold mint-batch-helper (zip amounts eco-impacts verif-levels) { project-id: project-id, index: u0 })
    (map-set project-mint-totals project-id (+ current-total batch-total))
    (var-set total-minted (+ (var-get total-minted) batch-total))
    (var-set last-mint-timestamp block-height)
    (map-set batch-mints project-id { total-amount: batch-total, count: size })
    (print { event: "batch-credits-minted", project-id: project-id, total-amount: batch-total })
    (ok true)
  )
)

(define-private (mint-batch-helper (entry { amount: uint, eco-impact: uint, verif-level: uint }) (acc { project-id: uint, index: uint }))
  (let ((pid (get project-id acc))
        (idx (get index acc)))
    (try! (validate-amount (get amount entry)))
    (try! (validate-eco-impact (get eco-impact entry)))
    (try! (validate-verif-level (get verif-level entry)))
    (try! (contract-call? .BiodiversityCreditToken mint (get amount entry) tx-sender))
    (map-insert mint-history pid (list { batch-id: idx, amount: (get amount entry), timestamp: block-height }))
    { project-id: pid, index: (+ idx u1) }
  )
)